{
	/*
	// Place your snippets for Go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"main": {
		"prefix": "main",
		"body": [
			"package main",
			"",
			"import \"fmt\"",
			"",
			"func main() {",
			"  $0fmt.Println(\"Hello, 世界\")",
			"}"
		],
		"description": "main"
	},
	"sort": {
		"prefix": "sort",
		"body": [
			"type $1Slice []$1",
			"",
			"func (p $1Slice) Len() int           { return len(p) }",
			"func (p $1Slice) Less(i, j int) bool { return p[i] < p[j] }",
			"func (p $1Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }"
		],
		"description": "sort"
	},
	"got": {
		"prefix": "got",
		"body": [
			"if got, want := $1, $2; got != want {",
			"  t.Errorf(\"$3: Got %v Want %v\", got, want)",
			"}"
		],
		"description": "main"
	},
	"ok": {
		"prefix": "ok",
		"body": [
			"if $1, ok := $2[$3]; !ok {",
			"  $4",
			"}"
		],
		"description": "if ,ok"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if err != ni {",
			"  $0",
			"}"
		],
		"description": "if"
	},
	"flags": {
		"prefix": "flags",
		"body": [
			"// flags",
			"var (",
			"  $1 = flag.String(\"$1\", \"$2\", \"$3\")",
			"  $0",
			")"
		],
		"description": "flags"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"type $1 string",
			"",
			"// $1 constants.",
			"const (",
			"  $2 $1 = \"$3\"",
			"  $0",
			")"
		],
		"description": "enum"
	},
	"testcase": {
		"prefix": "testcase",
		"body": [
			"testCases := []struct {",
			"  value    $1",
			"  expected $2",
			"  message  string",
			"}{",
			"  {",
			"    value:   $3,",
			"    expected: $4,",
			"    message: \"$5\",",
			"  },",
			"}",
			"",
			"for _, tc := range testCases {",
			"  if got, want := $6(tc.value), tc.expected; got!=want {",
			"    t.Errorf(\"Failed case Got %v Want %v: %s\", got, want, tc.message)",
			"  }",
			"}"
		],
		"description": "testcase"
	},
	"testing": {
		"prefix": "testing",
		"body": [
			"package $1",
			"",
			"import \"testing\"",
			"",
			"$0"
		],
		"description": "start a testing module"
	}
}